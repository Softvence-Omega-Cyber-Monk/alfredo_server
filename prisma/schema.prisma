generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PendingUser {
  id          String   @id @default(uuid())
  fullName    String
  email       String   @unique
  phoneNumber String?  @unique
  password    String
  createdAt   DateTime @default(now())

  otps OtpVerification[] @relation("PendingUserOtp")
}

model User {
  id                 String              @id @default(uuid())
  fullName           String
  email              String              @unique
  phoneNumber        String?             @unique
  photo              String?
  age                String?
  dateOfBirth        String?
  identification     IdentificationType?
  languagePreference Language?
  city               String[]
  password           String
  resetToken         String?
  resetTokenExpiry   DateTime?
  subscriptions      Subscription[]
  isSubscribed       Boolean?            @default(false)
  achievementBadges  String[]
  paymentCardNumber  String[]
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  properties               Property[]        @relation("UserProperties")
  sentMessages             ChatMessage[]     @relation("Sender")
  receivedMessages         ChatMessage[]     @relation("Receiver")
  exchangeRequestsSent     ExchangeRequest[] @relation("FromUser")
  exchangeRequestsReceived ExchangeRequest[] @relation("ToUser")

  notifications Notification[]
  // Onboarding relation
  onboarding Onboarding?
}

model OtpVerification {
  id         String      @id @default(uuid())
  userId     String
  user       PendingUser @relation("PendingUserOtp", fields: [userId], references: [id], onDelete: Cascade)
  otp        String
  method     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime    @default(now())
}

model Onboarding {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // Step 1: Home Listing
  homeAddress String?
  destination String?

  // Step 2: Verification Info
  ageRange             String
  gender               Gender?
  employmentStatus     EmploymentStatus?
  travelType           String
  favoriteDestinations String[]
  travelMostlyWith     TravelGroup?
  isTravelWithPets     Boolean
  notes                String?
  hasOnBoarded          Boolean @default(false)
  // Step 3: Property Type Info
  propertyType    PropertyType?
  isMainResidence Boolean?

  // Step 4: Amenities & Environment (Many-to-Many)
  amenities    Amenity[]         @relation("OnboardingAmenities")
  transports   TransportOption[] @relation("OnboardingTransports")
  surroundings SurroundingType[] @relation("OnboardingSurroundings")

  // Step 5: About Home
  homeName          String?
  homeDescription   String?
  aboutNeighborhood String?

  // Step 6: Upload Photo
  homeImages String[] // Array of image URLs

  // Step 7: Home Availability
  isAvailableForExchange Boolean   @default(true)
  availabilityStartDate  DateTime?
  availabilityEndDate    DateTime?
}

model Amenity {
  id          String       @id @default(cuid())
  name        String
  icon        String?

  onboardings Onboarding[] @relation("OnboardingAmenities")
}

model TransportOption {
  id          String       @id @default(cuid())
  name        String
  icon        String?

  onboardings Onboarding[] @relation("OnboardingTransports")
}

model SurroundingType {
  id          String       @id @default(cuid())
  name        String
  icon        String?

  onboardings Onboarding[] @relation("OnboardingSurroundings")
}


model Property {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  city        String
  country     String
  price       Float?
  size        Float?
  bedrooms    Int?
  bathrooms   Int?
  images      String[]

  isAvailable Boolean @default(true)

  ownerId String
  owner   User   @relation("UserProperties", fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exchangeRequestsSent     ExchangeRequest[] @relation("FromProperty")
  exchangeRequestsReceived ExchangeRequest[] @relation("ToProperty")
}

model Article {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  description String
  content     String
  image       String
  category    String
  authorName  String
  authorImage String
  lastUpdated DateTime @default(now())
  isFeatured  Boolean  @default(false)
  @@map("articles")
}

model ChatMessage {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])

  exchangeRequestId String? 
  exchangeRequest   ExchangeRequest? @relation(fields: [exchangeRequestId], references: [id])
}

model ExchangeRequest {
  id             String         @id @default(uuid())
  fromUserId     String
  toUserId       String
  fromPropertyId String
  toPropertyId   String
  status         ExchangeStatus @default(PENDING)
  message        String? // Optional message
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  fromUser     User     @relation("FromUser", fields: [fromUserId], references: [id])
  toUser       User     @relation("ToUser", fields: [toUserId], references: [id])
  fromProperty Property @relation("FromProperty", fields: [fromPropertyId], references: [id])
  toProperty   Property @relation("ToProperty", fields: [toPropertyId], references: [id])

  chatMessages ChatMessage[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  price         Float
  features      String[]
  planType      PlanType
  status        PlanStatus     @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime @default(now())
  endDate   DateTime

  user     User      @relation(fields: [userId], references: [id])
  plan     Plan      @relation(fields: [planId], references: [id])
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id             String        @id @default(uuid())
  amount         Float
  currency       String        @default("USD")
  status         PaymentStatus
  transactionId  String        @unique
  subscriptionId String

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  createdAt    DateTime     @default(now())
}

model Contact {
  id          String   @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  opinion     String
  createdAt   DateTime @default(now())
}

model FAQCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  faqs      FAQ[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id         String      @id @default(uuid())
  question   String
  answer     String
  categoryId String
  category   FAQCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model TermsCategory {
  id          String     @id @default(uuid())
  title       String
  lastUpdated DateTime   @default(now())
  keyPoints   KeyPoint[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KeyPoint {
  id         String        @id @default(uuid())
  point      String
  categoryId String
  category   TermsCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AgeRange {
  AGE_18_30
  AGE_30_50
  AGE_50_65
  AGE_65_PLUS
}

enum Gender {
  MALE
  FEMALE
  NOT_SPECIFIED
}

enum IdentificationType {
  NID
  PASSPORT
  BIRTH_CERTIFICATE
}

enum Language {
  ENGLISH
  GREEK
}

enum EmploymentStatus {
  WORKER
  RETIRED
  STUDENT
  UNEMPLOYED
}

enum TravelGroup {
  BY_MYSELF
  FAMILY
  COUPLE
  FRIENDS
}

enum DestinationType {
  BIG_CITIES
  SMALL_CITIES
  SEASIDE
  MOUNTAIN
}

enum PropertyType {
  HOME
  APARTMENT
}

enum ExchangeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum PlanStatus {
  ACTIVE
  INACTIVE
}

enum PlanType {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}
