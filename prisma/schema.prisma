// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PendingUser {
  id          String   @id @default(uuid())
  fullName String
  email       String   @unique
  phoneNumber String?   @unique
  password    String
  createdAt   DateTime @default(now())

  otps OtpVerification[] @relation("PendingUserOtp")
}

model User {
  id               String         @id @default(uuid())
  fullName String
  email            String         @unique
  phoneNumber      String?         @unique
  photo            String?
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
  subscriptions    Subscription[]
  isSubscribed     Boolean?       @default(false)
  role             Role           @default(USER)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  properties               Property[]        @relation("UserProperties")
  sentMessages             ChatMessage[]     @relation("Sender")
  receivedMessages         ChatMessage[]     @relation("Receiver")
  exchangeRequestsSent     ExchangeRequest[] @relation("FromUser")
  exchangeRequestsReceived ExchangeRequest[] @relation("ToUser")

  notifications Notification[]
}

model OtpVerification {
  id         String      @id @default(uuid())
  userId     String
  user       PendingUser @relation("PendingUserOtp", fields: [userId], references: [id], onDelete: Cascade)
  otp        String
  method     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime    @default(now())
}

model Property {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  city        String
  country     String
  price       Float?
  size        Float?
  bedrooms    Int?
  bathrooms   Int?
  images      String[]
  isAvailable Boolean  @default(true)

  ownerId String
  owner   User   @relation("UserProperties", fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exchangeRequestsSent     ExchangeRequest[] @relation("FromProperty")
  exchangeRequestsReceived ExchangeRequest[] @relation("ToProperty")
}

model ChatMessage {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])

  exchangeRequestId String? // Optional link to exchange request discussion
  exchangeRequest   ExchangeRequest? @relation(fields: [exchangeRequestId], references: [id])
}

model ExchangeRequest {
  id             String         @id @default(uuid())
  fromUserId     String
  toUserId       String
  fromPropertyId String
  toPropertyId   String
  status         ExchangeStatus @default(PENDING)
  message        String? // Optional message
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  fromUser     User     @relation("FromUser", fields: [fromUserId], references: [id])
  toUser       User     @relation("ToUser", fields: [toUserId], references: [id])
  fromProperty Property @relation("FromProperty", fields: [fromPropertyId], references: [id])
  toProperty   Property @relation("ToProperty", fields: [toPropertyId], references: [id])

  chatMessages ChatMessage[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  price         Float
  features      String[]
  planType      PlanType
  status        PlanStatus     @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime @default(now())
  endDate   DateTime

  user     User      @relation(fields: [userId], references: [id])
  plan     Plan      @relation(fields: [planId], references: [id])
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id             String        @id @default(uuid())
  amount         Float
  currency       String        @default("USD")
  status         PaymentStatus
  transactionId  String        @unique
  subscriptionId String

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  createdAt    DateTime     @default(now())
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  opinion   String
  createdAt DateTime @default(now())
}

model FAQCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  faqs      FAQ[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id         String      @id @default(uuid())
  question   String
  answer     String
  categoryId String
  category   FAQCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model TermsCategory {
  id          String     @id @default(uuid())
  title       String
  lastUpdated DateTime   @default(now())
  keyPoints   KeyPoint[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KeyPoint {
  id         String        @id @default(uuid())
  point      String
  categoryId String
  category   TermsCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExchangeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum PlanStatus {
  ACTIVE
  INACTIVE
}

enum PlanType {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}
